% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xgb.train.surv.R
\name{xgb.train.surv}
\alias{xgb.train.surv}
\title{Train a survival xgboost including baseline hazard}
\usage{
xgb.train.surv(x, time_var, status_var, val_frac = NULL,
  param_list = NULL, nrounds, verbose = 1, print_every_n = 1L,
  early_stopping_rounds = NULL, save_period = NULL,
  save_name = "surv_xgboost.model", ...)
}
\arguments{
\item{x}{trainig dataset. either a data.frame or a matrix}

\item{time_var}{name of variable denoting time to event}

\item{status_var}{name of variable denoting event (1 - event/dead, 0 - right censored/alive)}

\item{val_frac}{fraction of training data set aside for validation in case early stopping rounds are used.
If not null (numeric between 0 and 1) then \code{early_stopping_rounds} should also be set}

\item{param_list}{parameter list passed to xgboost. If null (default) then objective is set
to \code{survival:cox} and eval_metric is set to \code{cox-nloglik}}

\item{nrounds}{same as in \code{xgb.train}}

\item{verbose}{same as in \code{xgb.train}}

\item{print_every_n}{same as in \code{xgb.train}}

\item{early_stopping_rounds}{same as in \code{xgb.train}. Should be set in case val_frac is set}

\item{save_period}{same as in \code{xgb.train}}

\item{save_name}{same as in \code{xgb.train}, though default is different}

\item{...}{more arguments to be passed to the underlying xgboost function call}
}
\value{
an object of class \code{surv_xgboost}
}
\description{
\code{xgb.train.surv} is a thin wrapper around \code{xgboost::xgb.train} that
produces a \code{surv_xgboost} object. This object has a predict method that enables full
survival curve prediction in addition to the usual relative risk score predictions.
}
\details{
The xgboost package supports the cox proportional hazards model but the predict method
returns only the risk score (which is equivalent to \eqn{exp(X\beta)} or \code{type = "risk"} in \code{survival::coxph}).
This function returns a \code{surv_xgboost} object which enables prediction of both the risk score as well
the entire survival curve. Baseline hazard rate is obtained using the \code{survival::basehaz} function
which is then scaled to fit the original baseline hazard computed (but not returned) by the \code{xgboost::xgb.train} function
}
\examples{
library(survival)
data("lung")
library(survXgboost)
x <- lung[complete.cases(lung), ] # doesn't handle missing values at the moment
x$status <- x$status - 1 # format status variable correctly such that 1 is event/death and 0 is censored/alive

# train surv_xgboost
surv_xgboost_model <- xgb.train.surv(
  x = x, time_var = "time", status_var = "status",
  val_frac = 0.1,
  param_list = list(
    objective = "survival:cox",
    eval_metric = "cox-nloglik",
    eta = 0.01 # larger eta leads to algorithm not converging, resulting in NaN predictions
  ),
  nrounds = 1000,
  early_stopping_rounds = 10
)

x$status <- NULL
x$time <- NULL

# predict survival curves
times <- seq(10, 1000, 50)
survival_curves <- predict(object = surv_xgboost_model, newdata = x, type = "surv", times = times)
matplot(times, t(survival_curves[1:5, ]), type = "l")

# predict risk score
risk_scores <- predict(object = surv_xgboost_model, newdata = x, type = "risk")
print(head(risk_scores))
}
\seealso{
\code{\link{predict.surv_xgboost}}
}
